{"searchDocs":[{"title":"intro","type":0,"sectionRef":"#","url":"/docs/intro","content":"intro","keywords":"","version":"Next"},{"title":"Remote","type":0,"sectionRef":"#","url":"/api/Remote","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Remote","url":"/api/Remote#functions","content":" ","version":null,"tagName":"h2"},{"title":"Namespace​","type":1,"pageTitle":"Remote","url":"/api/Remote#Namespace","content":"&lt;/&gt; Remote.Namespace(namespacePrefix: string) → Remote Creates a copy of the Remote library that automatically prefixes key arguments to all Remote library function calls. Conventionally uses dots to prefix keys within the namespace. For example: local wearOutfit = Remote.Function(&quot;Avatar.WearOutfit&quot;) local equipItem = Remote.Event(&quot;Avatar.EquipItem&quot;) local itemIds = Remote.State(&quot;Avatar.EquippedItemIDs&quot;, {} :: {string}) In the instance above, the prefix &quot;Avatar&quot; can converted to a namespace: local AvatarRemotes = Remote.Namespace(&quot;Avatar&quot;) Objects can then be created/accessed using the same API as the Remote library through the Avatar namespace: local wearOutfit = AvatarRemotes.Function(&quot;WearOutfit&quot;) local equipItem = AvatarRemotes.Event(&quot;EquipItem&quot;) local itemIds = AvatarRemotes.State(&quot;EquippedItemIDs&quot;, {} :: {string})  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}